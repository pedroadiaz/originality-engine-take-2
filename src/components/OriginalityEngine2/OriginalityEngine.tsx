"use client";
/**
 * This code was generated by Builder.io.
 */
import React, { useState, useEffect, createContext } from "react";
import { initialize } from "../../app/service/openai.service";
import Header from "./Header";
import IdeaInput from "../OriginalityEngine1/IdeaInput";
import OpenAI from "openai";
import RecentCampaigns from "./RecentCampaigns";
import MainContent from "../MainContent";
import Footer from "../Footer";
import { AdResponse } from "@/app/models/AdResponse";
import Logo from "../OriginalityEngine/Logo";
import OllySuggestion from "../OriginalityEngine/OllySuggestion";

export const OriginalityEngineContext = createContext<AdResponse | null>(null);

const OriginalityEngine: React.FC = () => {

  const [idea, setIdea] = useState("");  
  const [oeAssistant, setOeAssistant] = React.useState<OpenAI.Beta.Assistants.Assistant | null>(null);
  const [adResponse, setAdResponse] = React.useState<AdResponse | null>(null);

  useEffect(() => {
    initialize().then((assistant) => {
      if (assistant) {
        console.log("Assistant initialized");
        setOeAssistant(assistant);
      }
    });
    if (localStorage.getItem("adResponse")) {
      setAdResponse(JSON.parse(localStorage.getItem("adResponse") as string) as AdResponse);
    }
  }, []);

  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => { setIdea(event.target.value); };

  const modifyIdea = (updatedIdea: string) => { setIdea(updatedIdea); };

  const handleSubmit = async() => {
    localStorage.clear();
    const response = await fetch("/api/gemini-chat", { method: "POST", body: JSON.stringify({ prompt: idea }) });
    const data = await response.json();
    const adResponse = data.response as AdResponse;
    fetch("/api/images", { method: "POST", body: JSON.stringify({ prompt: adResponse?.imagePrompts[0].prompt }) })
    .then((response) => response.json())
    .then((data) => {
      adResponse.imagePrompts[0].imageUrl = data.image as string;
      setAdResponse(adResponse);
      localStorage.setItem("adResponse", JSON.stringify(adResponse));
    });
  }

  const handleModify = async() => {
    localStorage.clear();
    const response = await fetch("/api/gemini-chat", { method: "POST", body: JSON.stringify({ prompt: idea }) });
    const data = await response.json();
    const adResponse = data.response as AdResponse;
    fetch("/api/images", { method: "POST", body: JSON.stringify({ prompt: adResponse?.imagePrompts[0].prompt }) })
    .then((response) => response.json())
    .then((data) => {
      adResponse.imagePrompts[0].imageUrl = data.image as string;
      setAdResponse(adResponse);
      localStorage.setItem("adResponse", JSON.stringify(adResponse));
    });
  }
  return (
    <div className="flex overflow-hidden flex-col bg-slate-900">
      <div className="w-full max-md:max-w-full">
        <div className="flex gap-5 max-md:flex-col">
          <aside className="flex flex-col w-[16%] max-md:ml-0 max-md:w-full">
            <div className="flex flex-col grow items-start">
              <div className="flex flex-col items-start py-10 pl-6 w-full max-md:pl-5">
                <Logo />
                <IdeaInput onClick={handleSubmit} handleChange={handleChange}/>
                {adResponse && (
                  <OllySuggestion adResponse={adResponse} modifyIdea={modifyIdea} handleModify={handleModify}/>
                )}
                <RecentCampaigns />
            </div>
          </div>
        </aside>
          {adResponse && (
              <OriginalityEngineContext.Provider value={adResponse}>
                <MainContent />
              </OriginalityEngineContext.Provider>
          )}
          </div>
        </div>
      <Footer />
    </div>
  );
};

export default OriginalityEngine;
